#!/usr/bin/env python

import dbus

class Spotify_Metadata():
    def __init__(self):
        self.bus: dbus.SessionBus = dbus.SessionBus()
        self.spotify_bus: dbus.Bus = self.bus.get_object("org.mpris.MediaPlayer2.spotify", "/org/mpris/MediaPlayer2")
        self.spotify_properties: dbus.Interface = dbus.Interface(self.spotify_bus, "org.freedesktop.DBus.Properties")
        self.properties_metadata = self.spotify_properties.Get("org.mpris.MediaPlayer2.Player", "Metadata")
        self.playback_time = self.spotify_properties.Get("org.mpris.MediaPlayer2.Player", "Position")

    def get_track_id(self):
        return self.properties_metadata['mpris:trackid']

    def get_length(self):
        return self.properties_metadata['mpris:length']

    def get_art_url(self):
        return self.properties_metadata['mpris:artUrl']

    def get_album(self):
        return self.properties_metadata['xesam:album']

    def get_album_artist(self):
        return self.properties_metadata['xesam:albumArtist']

    def get_artist(self):
        return self.properties_metadata['xesam:artist'][0]

    def get_auto_rating(self):
        return self.properties_metadata['xesam:autoRating']

    def get_discNumber(self):
        return self.properties_metadata['xesam:discNumber']

    def get_title(self):
        return self.properties_metadata['xesam:title']

    def get_track_number(self):
        return self.properties_metadata['xesam:trackNumber']

    def get_url(self):
        return self.properties_metadata['xesam:url']

    def micros_to_timestamp(micros: int) -> str:
        minutes = int(micros / 60000000)
        seconds = int((micros - (minutes * 60000000)) / 1000000)
        return f"{minutes}:{seconds:02}"

    def get_current_playtime(self) -> str:
        return Spotify_Metadata.micros_to_timestamp(self.playback_time)

    def get_song_len(self) -> str:
        return Spotify_Metadata.micros_to_timestamp(self.get_length())

if __name__ == "__main__":
    metadata = Spotify_Metadata()
    # print(metadata.get_current_playtime())
    print(f'{metadata.get_title()}  {"\udb81\udcc7".encode('utf-16', 'surrogatepass').decode('utf-16')}   {metadata.get_artist()} ({metadata.get_current_playtime()}/{metadata.get_song_len()})')
